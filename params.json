{"name":"Optlang","tagline":"optlang - sympy based mathematical programming language","body":"[![Build Status](https://travis-ci.org/biosustain/optlang.png?branch=master)](https://travis-ci.org/biosustain/optlang)\r\n[![Coverage Status](https://coveralls.io/repos/biosustain/optlang/badge.png?branch=master)](https://coveralls.io/r/biosustain/optlang?branch=master)\r\n[![PyPI version](https://badge.fury.io/py/optlang.svg)](http://badge.fury.io/py/optlang)\r\n\r\noptlang\r\n=======\r\n\r\n### Vision\r\n__optlang__ provides a common interface to a series of optimization solvers (linear & non-linear) and relies on [sympy](http://sympy.org/en/index.html) for problem formulation (constraints, objectives, variables, etc.). Adding new solvers is easy: just sub-class the high-level interface and implement the necessary solver specific routines.\r\n\r\n### Documentation\r\n\r\nThe documentation for __optlang__ is provided at [readthedocs.org](http://optlang.readthedocs.org/en/latest/).\r\n\r\n### Example\r\n\r\nFormulating and solving the problem is straightforward (example taken from [GLPK documentation](http://www.gnu.org/software/glpk)):\r\n\r\n    from optlang import Model, Variable, Constraint, Objective\r\n \r\n    x1 = Variable('x1', lb=0)\r\n    x2 = Variable('x2', lb=0)\r\n    x3 = Variable('x3', lb=0)\r\n \r\n    c1 = Constraint(x1 + x2 + x3, ub=100)\r\n    c2 = Constraint(10 * x1 + 4 * x2 + 5 * x3, ub=600)\r\n    c3 = Constraint(2 * x1 + 2 * x2 + 6 * x3, ub=300)\r\n \r\n    obj = Objective(10 * x1 + 6 * x2 + 4 * x3, direction='max')\r\n \r\n    model = Model(name='Simple model')\r\n    model.objective = obj\r\n    model.add([c1, c2, c3])\r\n \r\n    status = model.optimize()\r\n \r\n    print \"status:\", model.status\r\n    print \"objective value:\", model.objective.value\r\n    for var_name, var in model.variables.iteritems():\r\n        print var_name, \"=\", var.primal\r\n \r\n The example will produce the following output:\r\n \r\n    status: optimal\r\n    objective value: 733.333333333\r\n    x2 = 66.6666666667\r\n    x3 = 0.0\r\n    x1 = 33.3333333333\r\n    \r\n### Future outlook\r\n\r\n* [Gurobi][gurobi_url] interface (very efficient MILP solver)\r\n* [CPLEX][cplex_url] interface (very efficient MILP solver)\r\n* [Mosek][mosek_url] interface (provides academic licenses)\r\n* [GAMS][gams_url] output (support non-linear problem formulation)\r\n* [DEAP][deap_url] (support for heuristic optimization)\r\n* Interface to [NEOS][neos_url] optimization server (for testing purposes and solver evaluation)\r\n* Automatically handle fractional and absolute value problems when dealing with LP/MILP/QP solvers (like GLPK, [CPLEX][cplex_url] etc.)\r\n\r\n### Requirements\r\n\r\n* Models should always be serializable to common problem formulation languages ([CPLEX][cplex_url], [GAMS][gams_url], etc.)\r\n* Models should be pickable\r\n* Common solver configuration interface (presolver, MILP gap, etc.)\r\n\r\n[cplex_url]: http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/ \"CPLEX\"\r\n[inspyred_url]: https://pypi.python.org/pypi/inspyred\r\n[gurobi_url]: http://www.gurobi.com/  \"GUROBI\"\r\n[mosek_url]: http://www.mosek.com/ \"MOSEK\"\r\n[gams_url]: http://www.gams.com/ \"GAMS\"\r\n[deap_url]: https://code.google.com/p/deap/ \"DEAP\"\r\n[neos_url]: http://www.neos-server.org/neos/ \"NEOS\"\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}